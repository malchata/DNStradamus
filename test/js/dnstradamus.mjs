const e="IntersectionObserver"in window&&"IntersectionObserverEntry"in window,t="requestIdleCallback"in window,n="MutationObserver"in window;function o(e){return Array.prototype.slice.call(document.querySelectorAll(e))}function r(e){const t=document.createElement("link");t.href=e,t.rel="dns-prefetch",document.head.appendChild(t)}function c(e){const t=e.split("/");return`${t[0]}//${t[2]}/`}function s(e,t){return!0}function i(i={}){const l=i.context||"body",d=i.include||s,f=i.observeChanges||!1;if(e){const e=[];let s=o(`${l} a[href^="http://"],a[href^="https://"]`);const i=new IntersectionObserver((n,o)=>{for(const l of n)if(l.intersectionRatio){const n=l.target,u=c(n.href);e.indexOf(u)<0&&u.indexOf(`${document.location.protocol}//${document.location.host}`)<0&&d(n,u)&&(t?requestIdleCallback(()=>{r(u)}):r(u),e.push(u)),o.unobserve(n),s=s.filter(e=>e!==n),s.length||f||i.disconnect()}});for(const e of s)i.observe(e);n&&f&&new MutationObserver(t=>{for(const n of t)if("childList"===n.type){const t=[].slice.call(n.addedNodes);for(const n of t)e.indexOf(c(n.href))<0&&(s.push(n),i.observe(n))}}).observe(o(l)[0],{childList:!0,subtree:!0})}}export{i as dnstradamus};
//# sourceMappingURL=dnstradamus.mjs.map
